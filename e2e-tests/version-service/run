#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. "${test_dir}"/../functions

VS_URL="http://version-service"
VS_PORT="11000"
VS_ENDPOINT="${VS_URL}:${VS_PORT}"

function deploy_version_service {
	desc 'install version service'
	kubectl_bin create configmap versions \
		--from-file "${test_dir}/conf/operator.9.9.9.pg-operator.dep.json" \
		--from-file "${test_dir}/conf/operator.9.9.9.pg-operator.json"
	kubectl_bin apply -f "${test_dir}/conf/vs.yml"
	sleep 10
}

function apply_version {
	local cluster=$1
	local version_to_upgrade=$2
	local release_channel=$3

	kubectl_bin patch "perconapgcluster/${cluster}" --type json \
		-p='[
				{"op":"add","path":"/spec/upgradeOptions","value":{"versionServiceEndpoint":"'${VS_ENDPOINT}'","apply":"'${release_channel}'"}},
				{"op":"replace","path":"/metadata/labels/pgo-version","value":"'${version_to_upgrade}'"},
				{"op":"replace","path":"/spec/userLabels/pgo-version","value":"'${version_to_upgrade}'"}
			]'
	sleep 10

	wait_generation_uniformity ${cluster} 2

	kubectl_bin get deployments,jobs \
		--selector=pg-cluster=${cluster} \
		-o jsonpath='{range .items[*]}{range .spec.template.spec.containers[*]}{.image}{"\n"}{end}{end}' | sort -s -u \
		>"${tmp_dir}/${version_to_upgrade}-deployed-${release_channel}-images.txt"

	kubectl_bin exec $(kubectl_bin get pods --selector=name=pg-client -o 'jsonpath={.items[].metadata.name}') -- \
		curl -s "${VS_ENDPOINT}/versions/v1/pg-operator/${version_to_upgrade}/${release_channel}" \
		| jq -r '.versions[] | .matrix | .pgbackrest, .pgbackrestRepo, .pgbadger, .pgbouncer, .postgresql | .[].imagePath' \
			>"${tmp_dir}/${version_to_upgrade}-origin-${release_channel}-images.txt"

	diff -u "${tmp_dir}/${version_to_upgrade}-deployed-${release_channel}-images.txt" "${tmp_dir}/${version_to_upgrade}-origin-${release_channel}-images.txt"
}

main() {

	create_namespace $namespace
	deploy_operator

	deploy_version_service

	desc 'start cluster'
	cluster="cluster1"
	PGO_TAG='1.0.0'
	PG_VER='13'
	kubectl_bin apply -f $conf_dir/client.yml
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/1.0.0_cr.yaml"

	apply_version ${cluster} '9.9.9' "${PG_VER}.4-recommended"

	kubectl delete perconapgcluster/${cluster}
	wait_for_delete "deployment/${cluster}"
	wait_for_delete "deployment/${cluster}-backrest-shared-repo"

	PG_VER='12'
	IMAGE_PGBOUNCER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbouncer"
	IMAGE_PG_HA="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-postgres-ha"
	IMAGE_BACKREST="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest"
	IMAGE_BACKREST_REPO="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbackrest-repo"
	IMAGE_PGBADGER="percona/percona-postgresql-operator:$PGO_TAG-ppg$PG_VER-pgbadger"
	spinup_pgcluster "${cluster}" "${test_dir}/conf/1.0.0_cr.yaml"

	apply_version ${cluster} '9.9.9' "${PG_VER}.8-recommended"
	destroy "${namespace}"
}

main
